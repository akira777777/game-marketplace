#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""
import sys
import os

sys.path.insert(0, os.path.abspath("."))

from app.core.database import get_db
from app.models import User, Game, Lot
from sqlalchemy.orm import Session
from passlib.context import CryptContext

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def create_simple_test_data():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    db: Session = next(get_db())

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user = db.query(User).filter(User.email == "test@example.com").first()
        if not test_user:
            test_user = User(
                username="testuser",
                email="test@example.com",
                hashed_password=pwd_context.hash("testpass123"),
                is_active=True,
                display_name="Test User",
                bio="–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏",
            )
            db.add(test_user)
            db.flush()

        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—ã
        games_data = [
            {
                "name": "World of Warcraft",
                "description": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è MMORPG –æ—Ç Blizzard Entertainment",
                "image_url": "https://bnetcmsus-a.akamaihd.net/cms/gallery/IUTVP1WBIG861541788064302.jpg",
            },
            {
                "name": "Counter-Strike 2",
                "description": "–ö—É–ª—å—Ç–æ–≤—ã–π –∫–æ–º–∞–Ω–¥–Ω—ã–π —à—É—Ç–µ—Ä",
                "image_url": "https://cdn.akamai.steamstatic.com/steam/apps/730/header.jpg",
            },
            {
                "name": "Dota 2",
                "description": "–°–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è MOBA –∏–≥—Ä–∞",
                "image_url": "https://cdn.akamai.steamstatic.com/steam/apps/570/header.jpg",
            },
            {
                "name": "The Witcher 3",
                "description": "–≠–ø–∏—á–µ—Å–∫–∞—è RPG –æ –≤–µ–¥—å–º–∞–∫–µ –ì–µ—Ä–∞–ª—å—Ç–µ",
                "image_url": "https://cdn.akamai.steamstatic.com/steam/apps/292030/header.jpg",
            },
        ]

        games = []
        for game_data in games_data:
            game = db.query(Game).filter(Game.name == game_data["name"]).first()
            if not game:
                game = Game(**game_data, is_active=True)
                db.add(game)
                db.flush()
            games.append(game)

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ—Ç—ã (–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞)
        lots_data = [
            {
                "title": "–ê–∫–∫–∞—É–Ω—Ç WoW —Å —Ä–µ–¥–∫–∏–º–∏ –º–∞—É–Ω—Ç–∞–º–∏",
                "description": "–ê–∫–∫–∞—É–Ω—Ç –≤ World of Warcraft —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π —Ä–µ–¥–∫–∏—Ö –º–∞—É–Ω—Ç–æ–≤ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ò–≥—Ä–∞–ª —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞! –í–∫–ª—é—á–∞–µ—Ç —Ä–µ–¥–∫–æ–≥–æ –¥—Ä–∞–∫–æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.",
                "price": 15000,
                "game_id": games[0].id,
                "seller_id": test_user.id,
                "status": "active",
                "category_id": 1,  # dummy category
            },
            {
                "title": "CS2 Prime –∞–∫–∫–∞—É–Ω—Ç Global Elite",
                "description": "–ê–∫–∫–∞—É–Ω—Ç Counter-Strike 2 —Å —Ä–∞–Ω–≥–æ–º Global Elite, –º–Ω–æ–≥–æ –¥–æ—Ä–æ–≥–∏—Ö —Å–∫–∏–Ω–æ–≤, Prime —Å—Ç–∞—Ç—É—Å. –ò–¥–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.",
                "price": 8500,
                "game_id": games[1].id,
                "seller_id": test_user.id,
                "status": "active",
                "category_id": 1,  # dummy category
            },
            {
                "title": "Dota 2 –∞–∫–∫–∞—É–Ω—Ç Divine —Ä–∞–Ω–≥–∞",
                "description": "–ê–∫–∫–∞—É–Ω—Ç Dota 2 —Å —Ä–∞–Ω–≥–æ–º Divine, –±–æ–ª—å—à–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è Immortal –ø—Ä–µ–¥–º–µ—Ç–æ–≤, —Ä–µ–¥–∫–∏–µ —Å–µ—Ç—ã –≥–µ—Ä–æ–µ–≤.",
                "price": 12000,
                "game_id": games[2].id,
                "seller_id": test_user.id,
                "status": "active",
                "category_id": 1,  # dummy category
            },
            {
                "title": "The Witcher 3 –ø–æ–ª–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ + DLC",
                "description": "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã —Å 100% –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä—ã –∏ –≤—Å–µ—Ö DLC. –í—Å–µ –∫–≤–µ—Å—Ç—ã, —Å–æ–∫—Ä–æ–≤–∏—â–∞ –∏ —Å–µ–∫—Ä–µ—Ç—ã –æ—Ç–∫—Ä—ã—Ç—ã.",
                "price": 500,
                "game_id": games[3].id,
                "seller_id": test_user.id,
                "status": "active",
                "category_id": 1,  # dummy category
            },
        ]

        for lot_data in lots_data:
            existing_lot = db.query(Lot).filter(Lot.title == lot_data["title"]).first()
            if not existing_lot:
                lot = Lot(**lot_data)
                db.add(lot)

        db.commit()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        print(f"üéÆ –°–æ–∑–¥–∞–Ω–æ –∏–≥—Ä: {len(games)}")
        print(f"üì¶ –°–æ–∑–¥–∞–Ω–æ –ª–æ—Ç–æ–≤: {len(lots_data)}")
        print("üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: test@example.com / testpass123")

    except Exception as e:
        db.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback

        traceback.print_exc()
    finally:
        db.close()


if __name__ == "__main__":
    create_simple_test_data()
