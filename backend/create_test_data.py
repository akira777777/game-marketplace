#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É GameMarketplace
"""
import sys
import os

sys.path.insert(0, os.path.abspath("."))

from app.core.database import get_db
from app.models import User, Game, Category, Lot
from sqlalchemy.orm import Session
from passlib.context import CryptContext
import datetime

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def create_test_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    db: Session = next(get_db())

    try:
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–≥—Ä
        categories_data = [
            {
                "name": "MMORPG",
                "description": "–ú–∞—Å—Å–æ–≤—ã–µ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–Ω–ª–∞–π–Ω-–∏–≥—Ä—ã",
            },
            {"name": "FPS", "description": "–®—É—Ç–µ—Ä—ã –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞"},
            {"name": "MOBA", "description": "–ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –±–æ–µ–≤—ã–µ –∞—Ä–µ–Ω—ã"},
            {"name": "RPG", "description": "–†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã"},
            {"name": "Strategy", "description": "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –∏–≥—Ä—ã"},
        ]

        categories = []
        for cat_data in categories_data:
            category = (
                db.query(Category).filter(Category.name == cat_data["name"]).first()
            )
            if not category:
                category = Category(**cat_data)
                db.add(category)
                db.flush()
            categories.append(category)

        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—ã
        games_data = [
            {
                "name": "World of Warcraft",
                "description": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è MMORPG –æ—Ç Blizzard Entertainment",
                "category_id": categories[0].id,
                "image_url": "https://images.blz-contentstack.com/v3/assets/blt2477dcaf4ebd440c/blt3c650c6c0827a078/wow-classic-hardcore-meta-image.jpg",
            },
            {
                "name": "Counter-Strike 2",
                "description": "–ö—É–ª—å—Ç–æ–≤—ã–π –∫–æ–º–∞–Ω–¥–Ω—ã–π —à—É—Ç–µ—Ä",
                "category_id": categories[1].id,
                "image_url": "https://cdn.akamai.steamstatic.com/steam/apps/730/header.jpg",
            },
            {
                "name": "Dota 2",
                "description": "–°–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è MOBA –∏–≥—Ä–∞",
                "category_id": categories[2].id,
                "image_url": "https://cdn.akamai.steamstatic.com/steam/apps/570/header.jpg",
            },
            {
                "name": "The Witcher 3",
                "description": "–≠–ø–∏—á–µ—Å–∫–∞—è RPG –æ –≤–µ–¥—å–º–∞–∫–µ –ì–µ—Ä–∞–ª—å—Ç–µ",
                "category_id": categories[3].id,
                "image_url": "https://cdn.akamai.steamstatic.com/steam/apps/292030/header.jpg",
            },
            {
                "name": "Civilization VI",
                "description": "–ü–æ—à–∞–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏",
                "category_id": categories[4].id,
                "image_url": "https://cdn.akamai.steamstatic.com/steam/apps/289070/header.jpg",
            },
        ]

        games = []
        for game_data in games_data:
            game = db.query(Game).filter(Game.name == game_data["name"]).first()
            if not game:
                game = Game(**game_data)
                db.add(game)
                db.flush()
            games.append(game)

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user = db.query(User).filter(User.email == "test@example.com").first()
        if not test_user:
            test_user = User(
                username="testuser",
                email="test@example.com",
                hashed_password=pwd_context.hash("testpass123"),
                is_active=True,
            )
            db.add(test_user)
            db.flush()

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ—Ç—ã
        lots_data = [
            {
                "title": "–ê–∫–∫–∞—É–Ω—Ç WoW —Å —Ä–µ–¥–∫–∏–º–∏ –º–∞—É–Ω—Ç–∞–º–∏",
                "description": "–ê–∫–∫–∞—É–Ω—Ç –≤ World of Warcraft —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π —Ä–µ–¥–∫–∏—Ö –º–∞—É–Ω—Ç–æ–≤ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ò–≥—Ä–∞–ª —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞!",
                "price": 15000,
                "game_id": games[0].id,
                "seller_id": test_user.id,
                "status": "active",
            },
            {
                "title": "CS2 Prime –∞–∫–∫–∞—É–Ω—Ç Global Elite",
                "description": "–ê–∫–∫–∞—É–Ω—Ç Counter-Strike 2 —Å —Ä–∞–Ω–≥–æ–º Global Elite, –º–Ω–æ–≥–æ —Å–∫–∏–Ω–æ–≤, Prime —Å—Ç–∞—Ç—É—Å",
                "price": 8500,
                "game_id": games[1].id,
                "seller_id": test_user.id,
                "status": "active",
            },
            {
                "title": "Dota 2 –∞–∫–∫–∞—É–Ω—Ç Divine —Ä–∞–Ω–≥–∞",
                "description": "–ê–∫–∫–∞—É–Ω—Ç Dota 2 —Å —Ä–∞–Ω–≥–æ–º Divine, –±–æ–ª—å—à–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ Immortal items",
                "price": 12000,
                "game_id": games[2].id,
                "seller_id": test_user.id,
                "status": "active",
            },
            {
                "title": "The Witcher 3 –ø–æ–ª–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ",
                "description": "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã —Å 100% –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º, –≤—Å–µ –∫–≤–µ—Å—Ç—ã, DLC –∏ —Å–µ–∫—Ä–µ—Ç—ã –æ—Ç–∫—Ä—ã—Ç—ã",
                "price": 500,
                "game_id": games[3].id,
                "seller_id": test_user.id,
                "status": "active",
            },
            {
                "title": "Civilization VI + –≤—Å–µ DLC",
                "description": "–õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–∞—è –∫–æ–ø–∏—è Civilization VI —Å–æ –≤—Å–µ–º–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏ –∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏",
                "price": 2500,
                "game_id": games[4].id,
                "seller_id": test_user.id,
                "status": "active",
            },
        ]

        for lot_data in lots_data:
            existing_lot = db.query(Lot).filter(Lot.title == lot_data["title"]).first()
            if not existing_lot:
                lot = Lot(**lot_data)
                db.add(lot)

        db.commit()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
        print(f"üéÆ –°–æ–∑–¥–∞–Ω–æ –∏–≥—Ä: {len(games)}")
        print(f"üì¶ –°–æ–∑–¥–∞–Ω–æ –ª–æ—Ç–æ–≤: {len(lots_data)}")
        print(f"üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: test@example.com / testpass123")

    except Exception as e:
        db.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        db.close()


if __name__ == "__main__":
    create_test_data()
